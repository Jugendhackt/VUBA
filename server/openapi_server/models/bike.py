# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Bike(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy=None, bike_id=None, provider=None, additional_info=None, is_stationary=None, station_id=None, coordinates=None):  # noqa: E501
        """Bike - a model defined in OpenAPI

        :param accuracy: The accuracy of this Bike.  # noqa: E501
        :type accuracy: float
        :param bike_id: The bike_id of this Bike.  # noqa: E501
        :type bike_id: str
        :param provider: The provider of this Bike.  # noqa: E501
        :type provider: str
        :param additional_info: The additional_info of this Bike.  # noqa: E501
        :type additional_info: str
        :param is_stationary: The is_stationary of this Bike.  # noqa: E501
        :type is_stationary: bool
        :param station_id: The station_id of this Bike.  # noqa: E501
        :type station_id: str
        :param coordinates: The coordinates of this Bike.  # noqa: E501
        :type coordinates: Coordinates
        """
        self.openapi_types = {
            'accuracy': float,
            'bike_id': str,
            'provider': str,
            'additional_info': str,
            'is_stationary': bool,
            'station_id': str,
            'coordinates': Coordinates
        }

        self.attribute_map = {
            'accuracy': 'Accuracy',
            'bike_id': 'BikeID',
            'provider': 'Provider',
            'additional_info': 'AdditionalInfo',
            'is_stationary': 'IsStationary',
            'station_id': 'StationId',
            'coordinates': 'Coordinates'
        }

        self._accuracy = accuracy
        self._bike_id = bike_id
        self._provider = provider
        self._additional_info = additional_info
        self._is_stationary = is_stationary
        self._station_id = station_id
        self._coordinates = coordinates

    @classmethod
    def from_dict(cls, dikt) -> 'Bike':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Bike of this Bike.  # noqa: E501
        :rtype: Bike
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy(self):
        """Gets the accuracy of this Bike.


        :return: The accuracy of this Bike.
        :rtype: float
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Bike.


        :param accuracy: The accuracy of this Bike.
        :type accuracy: float
        """
        if accuracy is None:
            raise ValueError("Invalid value for `accuracy`, must not be `None`")  # noqa: E501

        self._accuracy = accuracy

    @property
    def bike_id(self):
        """Gets the bike_id of this Bike.


        :return: The bike_id of this Bike.
        :rtype: str
        """
        return self._bike_id

    @bike_id.setter
    def bike_id(self, bike_id):
        """Sets the bike_id of this Bike.


        :param bike_id: The bike_id of this Bike.
        :type bike_id: str
        """
        if bike_id is None:
            raise ValueError("Invalid value for `bike_id`, must not be `None`")  # noqa: E501

        self._bike_id = bike_id

    @property
    def provider(self):
        """Gets the provider of this Bike.


        :return: The provider of this Bike.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Bike.


        :param provider: The provider of this Bike.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def additional_info(self):
        """Gets the additional_info of this Bike.

        Additional information; markdown  # noqa: E501

        :return: The additional_info of this Bike.
        :rtype: str
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this Bike.

        Additional information; markdown  # noqa: E501

        :param additional_info: The additional_info of this Bike.
        :type additional_info: str
        """
        if additional_info is None:
            raise ValueError("Invalid value for `additional_info`, must not be `None`")  # noqa: E501

        self._additional_info = additional_info

    @property
    def is_stationary(self):
        """Gets the is_stationary of this Bike.


        :return: The is_stationary of this Bike.
        :rtype: bool
        """
        return self._is_stationary

    @is_stationary.setter
    def is_stationary(self, is_stationary):
        """Sets the is_stationary of this Bike.


        :param is_stationary: The is_stationary of this Bike.
        :type is_stationary: bool
        """

        self._is_stationary = is_stationary

    @property
    def station_id(self):
        """Gets the station_id of this Bike.

        null if IsStationary is false, or nor provided by provider  # noqa: E501

        :return: The station_id of this Bike.
        :rtype: str
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this Bike.

        null if IsStationary is false, or nor provided by provider  # noqa: E501

        :param station_id: The station_id of this Bike.
        :type station_id: str
        """

        self._station_id = station_id

    @property
    def coordinates(self):
        """Gets the coordinates of this Bike.


        :return: The coordinates of this Bike.
        :rtype: Coordinates
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Bike.


        :param coordinates: The coordinates of this Bike.
        :type coordinates: Coordinates
        """
        if coordinates is None:
            raise ValueError("Invalid value for `coordinates`, must not be `None`")  # noqa: E501

        self._coordinates = coordinates

// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * VUBA API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: TobiasBrohl@Protonmai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "https://virtserver.swaggerhub.com/The_Minefighter/VUBA/1.0.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Bike
 */
export interface Bike {
    /**
     * 
     * @type {number}
     * @memberof Bike
     */
    accuarcy?: number;
    /**
     * 
     * @type {string}
     * @memberof Bike
     */
    bikeID: string;
    /**
     * 
     * @type {string}
     * @memberof Bike
     */
    provider: string;
    /**
     * Additional information; markdown
     * @type {string}
     * @memberof Bike
     */
    additionalInfo: string;
    /**
     * 
     * @type {boolean}
     * @memberof Bike
     */
    isStationary?: boolean;
    /**
     * null if IsStationary is false, or nor provided by provider
     * @type {string}
     * @memberof Bike
     */
    stationId?: string;
    /**
     * 
     * @type {Coordinates}
     * @memberof Bike
     */
    coordinates: Coordinates;
}

/**
 * 
 * @export
 * @interface BikeRet
 */
export interface BikeRet {
    /**
     * 
     * @type {Array<Bike>}
     * @memberof BikeRet
     */
    bikes: Array<Bike>;
}

/**
 * 
 * @export
 * @interface Coordinates
 */
export interface Coordinates {
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    lat: number;
    /**
     * 
     * @type {number}
     * @memberof Coordinates
     */
    lon: number;
}


/**
 * DevelopersApi - axios parameter creator
 * @export
 */
export const DevelopersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for Bikes at a given Loaction
         * @param {Coordinates} [coordinates] coordinates to search at
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikesInternal(coordinates?: Coordinates, limit?: number, options: any = {}): RequestArgs {
            const localVarPath = `/getBikes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (coordinates !== undefined) {
                localVarQueryParameter['coordinates'] = coordinates;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopersApi - functional programming interface
 * @export
 */
export const DevelopersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Searches for Bikes at a given Loaction
         * @param {Coordinates} [coordinates] coordinates to search at
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikesInternal(coordinates?: Coordinates, limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BikeRet> {
            const localVarAxiosArgs = DevelopersApiAxiosParamCreator(configuration).getBikesInternal(coordinates, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * DevelopersApi - factory interface
 * @export
 */
export const DevelopersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Searches for Bikes at a given Loaction
         * @param {Coordinates} [coordinates] coordinates to search at
         * @param {number} [limit] maximum number of records to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBikesInternal(coordinates?: Coordinates, limit?: number, options?: any) {
            return DevelopersApiFp(configuration).getBikesInternal(coordinates, limit, options)(axios, basePath);
        },
    };
};

/**
 * DevelopersApi - object-oriented interface
 * @export
 * @class DevelopersApi
 * @extends {BaseAPI}
 */
export class DevelopersApi extends BaseAPI {
    /**
     * 
     * @summary Searches for Bikes at a given Loaction
     * @param {Coordinates} [coordinates] coordinates to search at
     * @param {number} [limit] maximum number of records to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopersApi
     */
    public getBikesInternal(coordinates?: Coordinates, limit?: number, options?: any) {
        return DevelopersApiFp(this.configuration).getBikesInternal(coordinates, limit, options)(this.axios, this.basePath);
    }

}

